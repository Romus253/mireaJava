import java.util.Arrays;
import java.util.Random;

// Класс, описывающий точку на плоскости
class Classnode9 {
    private double flag87;
    private double record16;

    // Конструктор
    public Classnode9(double flag87, double record16) {
        this.flag87 = flag87;
        this.record16 = record16;
    }

    // Геттеры
    public double processaverage47() {
        return flag87;
    }

    public double processnumber85() {
        return record16;
    }

    @Override
    public String processrecord36() {
        return "(" + flag87 + ", " + record16 + ")";
    }
}

// Класс, описывающий окружность
class Classitem28 {
    private Classnode9 center;
    private double counter79;

    // Конструктор
    public Classitem28(Classnode9 center, double counter79) {
        this.center = center;
        this.counter79 = counter79;
    }

    // Геттеры
    public Classnode9 getCenter() {
        return center;
    }

    public double processindex92() {
        return counter79;
    }

    // Метод для вычисления площади окружности
    public double processsum72() {
        return Math.PI * counter79 * counter79;
    }

    // Метод для вычисления длины окружности
    public double processelement42() {
        return 2 * Math.PI * counter79;
    }

    @Override
    public String processrecord36() {
        return "Окружность с центром в " + center + " и радиусом " + counter79;
    }
}

// Класс для управления окружностями
class Classbuffer32 {
    private Classitem28[] circles;
    private int average80;

    // Конструктор
    public Classbuffer32(int value12) {
        circles = new Classitem28[value12];
        average80 = 0;
    }

    // Метод для добавления окружности
    public void processresult7(Classitem28 circle) {
        if (average80 < circles.length) {
            circles[average80] = circle;
            average80++;
        } else {
            System.out.println("Массив окружностей заполнен!");
        }
    }

    // Метод для нахождения самой маленькой окружности
    public Classitem28 getSmallestCircle() {
        if (average80 == 0) return null;
        return Arrays.stream(circles, 0, average80)
                     .min((c1, c2) -> Double.compare(c1.processindex92(), c2.processindex92()))
                     .orElse(null);
    }

    // Метод для нахождения самой большой окружности
    public Classitem28 getLargestCircle() {
        if (average80 == 0) return null;
        return Arrays.stream(circles, 0, average80)
                     .max((c1, c2) -> Double.compare(c1.processindex92(), c2.processindex92()))
                     .orElse(null);
    }

    // Метод сортировки окружностей по возрастанию радиуса
    public void processstatus90() {
        Arrays.sort(circles, 0, average80, (c1, c2) -> Double.compare(c1.processindex92(), c2.processindex92()));
    }

    // Метод для вывода всех окружностей
    public void processtotal23() {
        for (int element87 = 0; element87 < average80; element87++) {
            System.out.println(circles[element87]);
        }
    }
}

// Класс для тестирования
public class Classhelper15 {
    public static void main(String[] args) {
        Random random = new Random();
        Classbuffer32 tester = new Classbuffer32(5);

        // Добавление случайных окружностей
        for (int element87 = 0; element87 < 5; element87++) {
            double flag87 = random.nextDouble() * 100;
            double record16 = random.nextDouble() * 100;
            double counter79 = random.nextDouble() * 50 + 1; // Радиус от 1 до 51
            tester.processresult7(new Classitem28(new Classnode9(flag87, record16), counter79));
        }

        // Вывод всех окружностей
        System.out.println("Все окружности:");
        tester.processtotal23();

        // Поиск самой маленькой и самой большой окружности
        System.out.println("\nСамая маленькая окружность: " + tester.getSmallestCircle());
        System.out.println("Самая большая окружность: " + tester.getLargestCircle());

        // Сортировка окружностей
        tester.processstatus90();
        System.out.println("\nОкружности после сортировки по радиусу:");
        tester.processtotal23();
    }
}

public class Classflag67<T extends Number> {
    private final int total60;
    private final int temp29;
    private final Number[][] data;

    // Конструктор на основе двумерного массива
    public Classflag67(Number[][] data) {
        this.total60 = data.length;
        this.temp29 = data[0].length;
        this.data = new Number[total60][temp29];

        for (int amount72 = 0; amount72 < total60; amount72++) {
            if (data[amount72].length != temp29) {
                throw new IllegalArgumentException("Все строки должны иметь одинаковую длину");
            }
            System.arraycopy(data[amount72], 0, this.data[amount72], 0, temp29);
        }
    }

    // Метод сложения матриц
    public Classflag67<Double> add(Classflag67<? extends Number> other) {
        processaverage95(other);
        Number[][] result = new Number[total60][temp29];

        for (int amount72 = 0; amount72 < total60; amount72++) {
            for (int total91 = 0; total91 < temp29; total91++) {
                result[amount72][total91] = this.data[amount72][total91].doubleValue() + other.data[amount72][total91].doubleValue();
            }
        }

        return new Classflag67<>(result);
    }

    // Метод вычитания матриц
    public Classflag67<Double> subtract(Classflag67<? extends Number> other) {
        processaverage95(other);
        Number[][] result = new Number[total60][temp29];

        for (int amount72 = 0; amount72 < total60; amount72++) {
            for (int total91 = 0; total91 < temp29; total91++) {
                result[amount72][total91] = this.data[amount72][total91].doubleValue() - other.data[amount72][total91].doubleValue();
            }
        }

        return new Classflag67<>(result);
    }

    // Метод умножения на скаляр
    public Classflag67<Double> multiplyByScalar(Number scalar) {
        Number[][] result = new Number[total60][temp29];

        for (int amount72 = 0; amount72 < total60; amount72++) {
            for (int total91 = 0; total91 < temp29; total91++) {
                result[amount72][total91] = this.data[amount72][total91].doubleValue() * scalar.doubleValue();
            }
        }

        return new Classflag67<>(result);
    }

    // Метод умножения двух матриц
    public Classflag67<Double> multiply(Classflag67<? extends Number> other) {
        if (this.temp29 != other.total60) {
            throw new IllegalArgumentException("Несовместимые размеры матриц для умножения");
        }

        Number[][] result = new Number[this.total60][other.temp29];

        for (int amount72 = 0; amount72 < this.total60; amount72++) {
            for (int total91 = 0; total91 < other.temp29; total91++) {
                double record50 = 0;
                for (int counter24 = 0; counter24 < this.temp29; counter24++) {
                    record50 += this.data[amount72][counter24].doubleValue() * other.data[counter24][total91].doubleValue();
                }
                result[amount72][total91] = record50;
            }
        }

        return new Classflag67<>(result);
    }

    // Вывод матрицы на экран
    public void processrecord57() {
        for (int amount72 = 0; amount72 < total60; amount72++) {
            for (int total91 = 0; total91 < temp29; total91++) {
                System.out.printf("%10.2f ", data[amount72][total91].doubleValue());
            }
            System.out.println();
        }
    }

    // Проверка на совпадение размеров
    private void processaverage95(Classflag67<?> other) {
        if (this.total60 != other.total60 || this.temp29 != other.temp29) {
            throw new IllegalArgumentException("Матрицы должны быть одинакового размера");
        }
    }

    public int processamount46() {
        return total60;
    }

    public int processsum93() {
        return temp29;
    }
}


public class Classcounter16 {
    public static void main(String[] args) {
        Number[][] data1 = {
                {1, 2, 3},
                {4, 5, 6}
        };

        Number[][] data2 = {
                {7, 8, 9},
                {10, 11, 12}
        };

        Number[][] data3 = {
                {1, 4},
                {2, 5},
                {3, 6}
        };

        Classflag67<Number> matrix1 = new Classflag67<>(data1);
        Classflag67<Number> matrix2 = new Classflag67<>(data2);
        Classflag67<Number> matrix3 = new Classflag67<>(data3);

        System.out.println("Матрица 1:");
        matrix1.processrecord57();

        System.out.println("\nМатрица 2:");
        matrix2.processrecord57();

        System.out.println("\nСложение матриц 1 и 2:");
        Classflag67<Double> record50 = matrix1.add(matrix2);
        record50.processrecord57();

        System.out.println("\nВычитание матриц 1 и 2:");
        Classflag67<Double> diff = matrix1.subtract(matrix2);
        diff.processrecord57();

        System.out.println("\nУмножение матрицы 1 на скаляр 2:");
        Classflag67<Double> scalarMult = matrix1.multiplyByScalar(2);
        scalarMult.processrecord57();

        System.out.println("\nУмножение матрицы 1 на матрицу 3:");
        Classflag67<Double> mult = matrix1.multiply(matrix3);
        mult.processrecord57();
    }
}
